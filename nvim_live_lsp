set encoding=UTF-8
set number
set noswapfile
set relativenumber
set clipboard=unnamedplus
set clipboard+=unnamedplus
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2
set background=dark
set colorcolumn=90
set mouse=a
filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" " when indenting with '>', use 4 spaces width
set shiftwidth=4
" " On pressing tab, insert 4 spaces
set expandtab
" " nmap <leader>l :set list! list?<CR>
set list
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\ 

let NERDTreeShowHidden=1

inoremap <C-Space> <C-x><C-o>
imap <buffer> <Nul> <C-Space>
smap <buffer> <Nul> <C-Space>" filetype plugin on
let g:airline_theme = "molokai"

" set termguicolors
" colorscheme one-dark
colorscheme nord

call plug#begin('~/.config/nvim')
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'saadparwaiz1/cmp_luasnip'
" Plug 'morhetz/gruvbox'
Plug 'Mofiqul/dracula.nvim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'vim-python/python-syntax'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'preservim/NERDTree'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'valloric/matchtagalways'
Plug 'honza/vim-snippets'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'L3MON4D3/LuaSnip'
Plug 'vim-airline/vim-airline-themes'
" " Plug 'chiel92/vim-autoformat'
" Plug 'ryanoasis/vim-devicons'
"
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'adrienverge/yamllint'
Plug 'neomake/neomake'
Plug 'MattesGroeger/vim-bookmarks'
" mm, mn, mp

Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
"
Plug 'preservim/vim-indent-guides'
Plug 'Xuyuanp/nerdtree-git-plugin'

call plug#end()

let g:NERDTreeGitStatusIndicatorMapCustom = {
	                \ 'Modified'  :'',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0

let g:prettier#quickfix_enabled = 0

nmap <C-e> :NERDTreeToggle<CR>
noremap '/ :Commentary<CR>
nnoremap ,<space> :nohlsearch<CR>
map bn :bn<cr>
map bp :bp<cr>
map bw :Bclose<cr>
map gw :tabclose<cr>

" FORMATTERS
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css
au FileType python setlocal formatprg=autopep8\ -aa\ --indent-size\ 0\ -
au FileType json setlocal formatprg=prettier
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

augroup remember_folds

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


map <Enter> o<ESC>


nnoremap ,f <cmd>:Files<cr>
nnoremap ,g <cmd>:Rg<cr>

" Telescope bindings
" nnoremap ,f <cmd>Telescope find_files<cr>
" nnoremap ,g <cmd>Telescope live_grep<cr>
" nnoremap ,b <cmd>Telescope buffers<cr>

let g:indent_guides_enable_on_vim_startup = 1

if &diff
    colorscheme molokai
endif

lua << EOF

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

local luasnip = require 'luasnip'

local cmp = require 'cmp'
cmp.setup({
completion = {
    autocomplete = false
},
snippet = {
    expand = function(args)
    require('luasnip').lsp_expand(args.body)
    end,
},
mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
    },

     ['<Tab>'] = function(fallback)
       if vim.fn.pumvisible() == 1 then
         vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<C-n>', true, true, true), 'n')
       else
  fallback()
  end
  end,
  ['<S-Tab>'] = function(fallback)
  if vim.fn.pumvisible() == 1 then
    vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<C-p>', true, true, true), 'n')
 	elseif luasnip.expand_or_jumpable() then
 	    vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-expand-or-jump', true, true, true), '')
 	elseif luasnip.jumpable(-1) then
 	    vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-jump-prev', true, true, true), '')
  else
    fallback()
  end
  end,
},
sources = {
    { name = 'nvim_lsp' },
	{ name = 'luasnip' },
},

formatting = {
    format = function(entry, vim_item)
    vim_item.kind = ({
    Text = "Text",
    Method = "Method",
    Function = "Function",
    Constructor = "Constructor",
    Field = "Field",
    Variable = "Variable",
    Class = "Class",
    Module = "Module",
    Property = "Property",
    Value = "Value",
    Enum = "Enum",
    Snippet = "Snippet",
    })[vim_item.kind]
    vim_item.menu = ({
    nvim_lsp = "[LSP]",
    treesitter = "[TreeSitter]",
    luasnip = "[LuaSnip]",
    buffer = "[Buffer]",
    })[entry.source.name]
    return vim_item
    end,
},
})
-- Setup lspconfig.
require('lspconfig').solargraph.setup{
capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
}

local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)

local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end


-- Mappings.
local opts = { noremap=true, silent=true }

-- See `:help vim.lsp.*` for documentation on any of the below functions
buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

require('lspconfig').yamlls.setup {
  -- other configuration for setup {}
  settings = {
    yaml = {
      -- other settings. note this overrides the lspconfig defaults.
      schemas = {
        ["https://raw.githubusercontent.com/instrumenta/kubernetes-json-schema/master/v1.18.0-standalone-strict/all.json"] = "/*.k8s.yaml",
        -- other schemas
      },
    },
  }
}

-- bashls
require 'lspconfig'.bashls.setup {
  on_attach = on_attach,
  capabilities = capabilities,
  filetypes = { 'zsh', 'bash', 'sh' },
}

EOF


noremap <silent> <Tab> <cmd>lua require('luasnip').jump(1)<Cr>
snoremap <silent> <S-Tab> <cmd>lua require('luasnip').jump(-1)<Cr>

" White colors for LSP messages in code
set termguicolors
