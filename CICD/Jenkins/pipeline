def IsDBUpdateRun = (env.IsDBUpdateRun == "true")
def IsRecoveryDBFromBackup = (env.IsRecoveryDBFromBackup == "true")
def IsBDDRun = (env.IsBDDRun == "true")
def IsSmokeTestRun = (env.IsSmokeTestRun == "true")
def IsSyntaxCheckRun = (env.IsSyntaxCheckRun == "true")
def IsUnloadCfgRun = (env.IsUnloadCfgRun == "true")
def IsSonarScanRun = (env.IsSonarScanRun == "true")
def errnumb = 0

def connectionString="/S${env.server1C}:${env.serverPort1C}\\${env.baseName}"
def rasString = "${env.server1C}:${env.rasPort}"
def uccode = "\"111\""
def lockParams = "--lockmessage \"Регламентные работы\" --uccode ${uccode}"

pipeline {
    agent none
	environment  {
        Storage = credentials('Storage_user')   //credentials - функция jenkins возвращает структуру 
        Base1C = credentials('db_user')   
        Cluster = credentials('cluster_admin')
    }
    post {  //Выполняется после сборки
        always {
            node('Windows-01') {
                script{
                    if (IsSyntaxCheckRun || IsSmokeTestRun) {
                        junit allowEmptyResults: true, testResults: '**/out/junit/*.xml'
                    }
                    if (IsSmokeTestRun || IsBDDRun) {
                        allure includeProperties: false, jdk: '', results: [[path: 'out/allure'], [path: 'out/addallure']]
                    }
                    emailext (
                    subject: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        Количество ошибок: ${errnumb}
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                    to: "${env.MailList}")
                    if (errnumb == 0) {
                        slackSend color: "good", message: "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful <${env.BUILD_URL}/allure|Перейти>"
                    }else{
                        slackSend color: "danger", message: "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} <${env.BUILD_URL}/allure|Перейти> Количество ошибок: ${errnumb}" 
                    }
                }
            }
        }
        failure {
            node('Windows-01') {
                cmd("echo Сообщение выводится при ошибке")      
                cmd("vrunner session unlock --ras ${rasString} --cluster-admin ${Cluster_Usr} --cluster-pwd  ${Cluster_Psw} --db ${env.baseName} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw}  ${lockParams} --v8version ${env.version1C}")
            }
        }
        success {
            node('Windows-01') {
              //  archiveArtifacts '.packman/1cv8.cf'
            } 
        } 
    }
   
    stages {
        stage('Обновление тестовой базы.'){
            agent {
                label 'Windows-01'
            }
            steps {     
                timestamps {
                    script {
                        if (IsDBUpdateRun) {
                            try {
                                errnumb += 1
                                cmd("vrunner session lock --ras ${rasString}  --cluster-admin ${Cluster_Usr} --cluster-pwd  ${Cluster_Psw} --db ${env.baseName} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw} --lockstartat 5 ${lockParams} --v8version ${env.version1C}")
                                cmd("vrunner session kill --ras ${rasString} --cluster-admin ${Cluster_Usr} --cluster-pwd  ${Cluster_Psw} --db ${env.baseName} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw} ${lockParams} --v8version ${env.version1C}")
                                cmd("vrunner unbindrepo --ibconnection ${connectionString} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw} --v8version ${env.version1C} --uccode ${uccode}")
                                cmd("vrunner compile --src=./src/cf -c --noupdate --ibconnection ${connectionString} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw} --v8version ${env.version1C} --uccode ${uccode} --debuglogfile ./out/compile.log")
                                cmd("vrunner updatedb --ibconnection ${connectionString} --db-user ${Base1C_Usr}  --db-pwd ${Base1C_Psw}  --v8version ${env.version1C} --uccode ${uccode}")
                                cmd("vrunner session unlock --ras ${rasString} --cluster-admin ${Cluster_Usr} --cluster-pwd  ${Cluster_Psw} --db ${env.baseName} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw}   --uccode ${uccode} --v8version ${env.version1C}")
                                errnumb -= 1
                            }
                            catch (err) {
                                echo "Произошла ошибка обновления тестовой базы"
                                if (IsSmokeTestRun) {
                                    echo "Дымовой тест будет пропущен"
                                    IsSmokeTestRun = false
                                }
                            }
                        }
                        else{
                            echo "Пропущено обновление тестовой базы"
                        }
                    }
                }
            }
        }

        stage('Синтаксическая проверка'){
            agent {
                label 'Windows-01'
            }
            steps {
                timestamps {
                    script {
                        if (IsSyntaxCheckRun) {
                            try {
                                errnumb += 1
                                cmd("vrunner syntax-check --junitpath ./out/junit/syntaxCheck.xml --ibconnection ${connectionString}  --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw} --v8version ${env.version1C}")
                                errnumb -= 1
                            }
                            catch (err) {
                                echo "Произошла ошибка синтакс проверки!"
                            }

                        }
                        else{
                            echo "Пропущена синтаксическая проверка"
                        }
                    }
                }
            }
        }
        
        stage('Дымовое тестирование'){
            agent {
                label 'Windows-01'
            }
            steps {
                timestamps {
                    timeout(time: 20, unit: 'MINUTES')
                    {
                        script {
                            if (IsRecoveryDBFromBackup) { // Временно выключено
                                try {
                                    
                                    errnumb += 1
                                    def СonfigurationText = readFile encoding: 'UTF-8', file: 'src/cf/Configuration.xml'
                                    def ConfigurationVersion = (СonfigurationText =~ /<Version>(.*)<\/Version>/)[0][1]
                                    cmd("vrunner xunit --settings tools/JSON/vRunner.json --ibconnection ${connectionString} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw}  --v8version ${env.version1C}")

                                    errnumb -= 1
                                }
                                catch (err) {
                                     
                                }
                                                                      
                            }
                            else{
                                echo "Пропущено Дымовое тестирование"
                            }
                        }
                   }
                }
            }
        }

        stage('Юнит тестирование'){
            agent {
                label 'Windows-01'
            }
            steps {
                timestamps {
                    timeout(time: 20, unit: 'MINUTES')
                    {
                        script {
                            if (IsSmokeTestRun) { 
                                try {
                                    
                                    errnumb += 1
                                    cmd("vrunner xunit tools/Unit --ibconnection ${connectionString} --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw}  --v8version ${env.version1C} --reportsxunit ГенераторОтчетаAllureXMLВерсия2{out/allure/allure-unit.xml}")
                                    errnumb -= 1
                                }
                                catch (err) {
  
                                }
                                                                      
                            }
                            else{
                                echo "Пропущено Юнит тестирование"
                            }
                        }
                   }
                }
            }
        }

        stage('Функциональное тестирование'){
            agent {
                label 'Windows-01'
            }
            steps {
                timestamps {
                    script {
                        if (IsBDDRun) {
                            try {
                                errnumb += 1
                                cmd("runner vanessa --settings ./tools/JSON/vRunner.json --workspace ${WORKSPACE} --root ${WORKSPACE} --ibconnection \"${connectionString}\" --db-user ${Base1C_Usr} --db-pwd ${Base1C_Psw}  ")
                                errnumb -= 1
                            }
                            catch (err) {
                                echo "Произошла ошибка функционального тестирования"
                            }
                        }
                        else{
                            echo "Пропущено Функциональное тестирование"
                        }
                    }
                }
            }
        }

        // stage('Сборка поставки'){
        //     agent {
        //         label 'Windows-01'
        //     }
        //     steps{
        //         timestamps{
        //             script {
        //                 if (IsUnloadCfgRun && errnumb == 0) {
        //                     try {
        //                         errnumb += 1
        //                         cmd("packman set-database ${connectionString} -db-user ${Base1C_Usr} -db-pwd ${Base1C_Psw}")
        //                         cmd("packman make-cf -v8version ${env.version1C}")
        //                         errnumb -= 1
        //                     }
        //                     catch (err) {
        //                         echo "Произошла ошибка сборки поставки"
        //                     }    
        //                 }
        //                 else{
        //                     echo "Пропущена сборка поставки"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage("Проверка ошибок") {
            steps {
                echo "Количество ошибок: errnumb = ${errnumb}"
                script {
                    if (errnumb != 0) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
}

// vrunner decompileepf ./epf ./src/epf

def cmd(command){
    if (isUnix()) {
        sh "${command}"
    } else {
        bat " chcp 65001\n${command}"
    }
}
