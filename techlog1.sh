# cat err/rphost_*/*.log |
cat *.log |
grep -P 'CALL.+Context=' |
sed -r 's/^[0-9]+:[0-9]+\.[0-9]+-//' |
sed -r 's/CALL,.+,Context=/CALL,Context=/' |
sed -r 's/,Memory=.+$//' |
gawk -F',CALL,Context=' '{errs[$2]+=1}END{for (i in errs) print errs[i] " " i}' |
sort -rnb |
head -n 10 > calls_by_duration.txt
<<<<<<< HEAD

=======
>>>>>>> 7d0aa98d9f9312c42d100a3641372676c3ee02ec
# cat 
# читает весь текстовый файл или каталог - всех текстовых файлов
# cat rphost_*/*.log | grep -P 'CALL.+Context=' 
# | - передача по конвееру.

# grep
# -P Perl будет понимать регулярные выражения которые использует язык Perl
# утилита командной строки, которая находит на вводе строки, отвечающие заданному регулярному выражению, и выводит их
# Точка это любой символ. Плюс означает что - (то что перед плюсом) - любое кол-ва раз но минимум один

# gawk
# gawk - программа для манипуляций с текстовыми файлами. Он является GNU-реализацией awk.
# C-подобный скриптовый язык построчного разбора и обработки входного потока (например, текстового файла) по заданным шаблонам (регулярным выражениям). 
# рассматривает любую строку как набор колонок. Группирует строки.
# errs = Новый соответствие;
# errs[key] = errs[key] + 1
# Считает кол-во ошибок

# sort 
# -r - в обратном порядке -n если начало строки число то сортировать как числа

# sed -r 's/\xef\xbb\xbf//g; s/^[0-9]+:[0-9]+.[0-9]+-//; s/CALL,.+,Context=/CALL,Context=/; s/,Memory=.+$//' | 
# gawk -F',CALL,' '{{Dur[$2]+=$1; Execs[$2]+=1}} END {for (i in Dur) print Dur[i] "=Duration," Execs[i] "=NumOfExec," i }' | 

# sed
# потоковый текстовый редактор Stream Editor (а также язык программирования), применяющий различные предопределённые текстовые преобразования к последовательному потоку текстовых данных.
# умеет либо заменять либо удалять
# -r расширенные регулярные выражения
# s - заменить /ЧтоЗаменить/НаЧтоЗаменить/
# ЧтоЗаменить - может быть строка , а могут быть регулярки

# sed -r 's/^[0-9]+:[0-9]+\.[0-9]+-//' |
# sed -r 's/CALL,.+,Context=/CALL,Context=/' |
# sed -r 's/,Memory=.+$//' |

# Регулярные выражения это шаблоны поиска
# ^ - мы ищем что-то что находится в начале строки
# [0-9] - числа
# + - то что перед плюсом может повторяться 1 или больше раз
# : - означает само себя
# \. - означает что именно точка
# - - означает само себя
# 

